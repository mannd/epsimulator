* Prucka window management implementation
** Major behavior to emulate
   - outer borders of the central widget are not moveable.
   - windows can't be moved inside central window by dragging title
     bar.
   - Resizing windows acts like a splitter bar.
** Other behavior
   - Log window always expands to full width of central widget
   - Odd window location selection behavior
     - when new window is selected in menu, horizontal or vertical
       line is shown on screen, left mouse click opens window in
       quadrant selected.
   - Closing window expands other horizontally aligned windows
   - Uncertain if can open Review2 without Review1 and vice versa
   - Can't close Real-time
     - but no Realtime if review study or no acquisition
       - no acquisition case is handled by Navigator
       - if acquisition changed during study, no effect
	 - maybe should disable that option during study???
** UI implementation of behavior
   Simplest way to implement is via menu options.  Examples:
   - Disable Review2 if no 
* Simplified window management
** rationale
   - Prucka behavior is very MS Windows dependent and would require
     using platform-specific QT window handling code to implement.
     Workarounds trapping mouse events, etc. are very difficult to do.
   - Implementation of Prucka behavior is very difficult, perhaps
     impossible, certainly slowing program development.
   - Prucka-like screen layouts can be manually simulated using an MDI
     setup and then can be saved for reuse.
   - Prucka window management is not standard windows GUI behavior and
     does not fulfil the standard of "least surprise."
** Arguments for Prucka behavior
   - Non-Prucka behavior weakens the simulation verisimilitude.  Why
     include all the other awkward Prucka elements and not this one?
   - Opening new windows such as Review2 requires manually laying out
     of the windows.  Methods to open and rearrange the windows in a
     default way could obviate this.  Saved window layouts could be
     used instead of just opening and closing windows.
   - Specific window behavior is still awkward.  Should the Realtime
     window be closeable?  It isn't in the Prucka.  Can you have a
     Review 2 and not a Review 1?  Not sure about that.  
** Recommendations
   - Recorder subwindows are MDI subwindows, thus use an MDI layout model.
   - In addition to Tile and Cascade, have an Organize Windows menu
     option that lays out the windows Prucka style.  When a new window
     is opened, have option to use the Organize Windows function or
     not.  (AutoOrganizeWindows option?)
   - Windows layouts are saved in study configurations, and when new
     study is loaded, the default study configuration window layout
     will be used.
* Multihead displays
** TwoReviewWindow option
   The basic option is using one or two review windows.  The number of
   physical screens is not important.  Multihead systems act like one
   big screen, thus saving the 2 screens, one on each screen, just
   saves the coordinates and should just work.  Maximizing on 2
   screens may not work right, will need to experiments with a 2
   screen system to be sure.  
** Recorder window layout versus subwindow layout
   Recorder window positions are stored in the EPSimulator.conf file.
   Subwindow layouts are stored in the config.dat files.  The
   rationale is that the user will keep his his Navigator and Recorder
   windows maximized or not, and won't want them changing sizes each
   time a new study is loaded.  The relative positioning of the
   windows will change from study to study.  Downside of this is that
   changing main window size will mess up subwindow locations.
** TODO 
   recorder window currently does store subwindow locations in
   EPSimulator.conf.  This is only the last configuration when the
   window is closed.  Need to work on study configuration data.
* Qt-creator issues
** gdb problem
   Solution: downloaded later version of gdb from here:
   ftp://ftp.qt.nokia.com/misc/gdb/
* Study vs Patient
** Study contains the initial state of the study
   This includes study specific items, such as date, study number,
   study state, etc.  When a study starts, there is also a patient who
   has an initial state.  This includes unchangeables like sex and
   date of birth but also things that can change from study to study
   like disease state, and also initial vital signs, rhythm, etc.  All
   this is present during each study.
** Different study situations
*** Pre-registered patient, from scratch
    
*** New Patient, from scratch
    User fills in patient demographics, selects patient template
    (defaults to '<default>').  

* Screen size
  Need to convert pixel distances to time intervals.  Screen
  resolution in pixels is known to program, can get from QDesktop
  class.  Sweep speed is set by program, in mm/sec, eg. 100 mm/sec.
  We need to know pixels/mm.  This depends on screen size.  Prucka
  must set this manually, based on monitor sizes.  Wrong screen size
  will make the sweep timing and interval measurements wrong, but not
  grossly so.  Could set default horizontal screen size to 17", but
  have it user modifiable.  Need either measurement or dpi for screen.
  
* Library dependency problems
** Windows settings problem
   git versions up to breaking point:
   edb0e3cbcac33fd872ac5bf7ba88ba4484ac2405
   9bfb5d3f3c97ac802e8887c6958b384b14fde7f2
   7cda2eaa79a4a77d7f1963d9ec2417938ec9ff62

   Last functioning git version is 9bfb5d3f3c....

   Problem is Study contains StudyConfiguration.  StudyConfiguration
   contains lots of data relating to Recorder: channels, amplifier,
   Window settings, etc.  Study just needs to have a
   StudyConfiguration name to start out with.  Recorder needs to
   contain the StudyConfiguration; Navigator also uses it, but
   Navigator references Recorder so that is ok.  Study itself can't
   reference a StudyConfiguration based in Recorder, because Recorder
   has to reference Study, thus circular references....
** Solution
   Eliminate Study library, incorporate it into Recorder library.
* Hardware simulation
** Top-down view
*** Gui
    Sets up the various windows, loads study, etc.
*** RealTimeWindow
**** Arranges channels
**** Runs main program loop (in separate thread?)
*** Main Loop
**** Each timer event
***** for each Channel
****** get voltage
****** store data in database
****** if page visible
******* gain/clip voltage, convert to Y axis distance from 0 voltage
******* draw line segment from last point to current point
*** Channel
    Each amplifier channel is polled.  Channel is either at zero line
    or is depolarizing.  Depolarization starts with the far field
    activation, depending on interelectrode distance.  Voltage is
    copied from an EGM template, chosen randomly for each catheter,
    but constant unless catheter moves.  
*** Catheter
    The catheter is located in the heart.  There are only 2 functional
    chambers: A and V, with special case location bundle of His (has
    A, V and H).  At time of polling, simulation must determine if
    tissue if at zero voltage or being depolarized.  Depolarization is
    a window, the width of the EGM.  During depolarization, an EGM
    template is copied to determine point to point voltage, otherwise
    voltage is zero.  
*** Digression on data format
    Time is a long integer representing milliseconds.  Channel is a
    number corresponding the amplifier channel.  Voltage is the
    channel voltage.  Gap between samples is sampling rate.  Assume
    sampling rate is 60 Hz:

    Time:Channel:Voltage
    0:1:0
    0:2:0
    0:3:.3
    .
    .
    .
    1420:5:3.3
    etc.
    Or, better still:
    Time:Channel:Voltage:Channel:Voltage...etc.
    0:1:0:2:0:3:0.3....etc.
*** Possible way to generate simulation:
    Have a data buffer, and have the simulation generate all the above
    data very quickly.  Probably need to double buffer this.  This can
    be in separate thread.  If Save is on, save the data to disk too.
    Simulation then just looks up time and reads each channel.  Better
    format for this would be binary, with a structure for each time.

    struct ChannelVoltage {
       int channel;
       double voltage;
};

struct Moment {
       long int time;
       ChannelVoltage channels[n];
};

Moment moments[buffersize];

Calculate offset in buffer: actual time mod buffer_size and read that Moment from the buffer, using pointer arithmatic.
* Disk Cache
** The 3 catalogs and data storage - reconsidered
   From reviewing the cardiolink pdf manual, it appears that there are
   several scenarios.
   - Standalone system
   - Networked system
   In both kinds of systems, there are 2 types of data to be
   considered:
   - Catalog data
   - Study data
   Finally, data handling also depends on the acquisition mode.  There
   are really just 2 situations:
   - Acquisition mode
   - Client mode
   If there are multiple EP labs, there are multiple sets of computers
   for acquisition and other functions.  For any one study, there is
   one acquisition computer and possibly multiple client computers, in
   the procedure room, or in the holding are.  These are linked by a
   fast ethernet switch.  The manual implies other computers can be
   linked in for review, such a in the MD's office, via slower
   connections.  As far as I can determine, these are also client
   computers -- I'm not sure if there is a way to limit to just review mode.
** Catalog data
*** Reading catalog data
    Catalog data is always read from the specific catalog selected in
    the Catalog Combobox.  The data file is always "catalog.dat" and
    is a top level file in the optical disk, the System directory on
    the acquisition system, and the network path.  
*** Writing catalog data
**** Networked system
     The network catalog must be highlighted, otherwise everthing is
     written to the local system.  Assuming the network catalog is
     highlighted, then entries go into that specific catalog.  
** Study data
*** Location
    Study data is located in the top-level "studies" directory.  Each
    study is in a subdirectory of the form
    "study_lastname_firstname_studykey."  Within each such directory
    are data files, include "study.dat," "patient.dat," "config.dat,"
    etc.  
*** Writing study data
** System data
   Note that "the windows settings are unique to each acquisition
   system and review workstation."
   
* Database
** Background
   It has become obvious that, similar to the Prucka system, the data
   stored by EP Simulator needs to be stored in a database.  Right now
   everthing is a flat file, and things like sorting, filtering,
   editing, adding new, deleting items is implemented in code.  Yuck!  
** Database selection
*** Sqlite
    Excellent choice for standalone program; not so good for networked
    system.  Not a client/server system.
*** MySQL
    Useful to emulate the Cardiolink server, ? if multiple users ever
    will be needed though.  More complex installation, setup.
** Use either?
   Not sure that will work -- might not be able to upgrade from one to
   the other.
** What is stored on the optical disk?
   The study data itself is not a database file.  
** Database tables
   - catalog
   - lists
   - intervals
   - etc
** Test case
** QMysql -- Up and Running!!!
   This is an clarification of the method to compile the mysql plugin
   for the Qt SDK found in the the Help documents.  Originally I was
   getting errors in compilation due to using command line 'qmake'
   which is not the qmake in the Qt SDK.  I needed to run qmake using
   the full path to it:

   /home/mannd/qtsdk-2009.05/qt/bin/qmake

   Note that the path to the mysql include files and the
   libmysqlclient file must be correct.  You must be in the correct
   directory:

   cd ~/qtsdk-2009.05/qt/src/plugins/sqldrivers/mysql

   Here is the full command line on SuperSluggo:

   ~/qtsdk-2009.05/qt/bin/qmake "INCLUDEPATH+=/usr/include/mysql" 
   "LIBS+=-L/usr/lib/mysql -lmysqlclient_r" mysql.pro

   After this do a make and make install (no sudo).  Look in the 
  /home/mannd/qtsdk-2009.05/qt/plugins/sqldrivers directory:

  total used in directory 3120 available 356853920
  drwxr-xr-x  2 mannd users    4096 2010-05-18 18:59 .
  drwxr-xr-x 11 mannd users    4096 2010-01-08 21:20 ..
  -rwxr-xr-x  1 mannd users  446207 2009-11-26 10:09 libqsqlite2.so
  -rwxr-xr-x  1 mannd users 2041224 2009-11-26 10:09 libqsqlite.so
  -rwxr-xr-x  1 mannd users   73896 2010-05-18 18:59 libqsqlmysql.so
  -rwxr-xr-x  1 mannd users  599206 2009-11-26 10:09 libqsqlpsql.so

  There is libqsqlmysl.so!
