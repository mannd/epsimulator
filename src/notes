Developer notes

Problem with ui.h file.  Adding code to Form::Init() did nothing.  I had to add a new slot to the form called init(), and this was added to the end of the constructor of the Form in the generated Form.cpp file.  I still needed to have the Form::Init() function in the ui.h file.

Ok, in KDevelop, add a public slot called init().  When asked for
implementation class for the dialog, hit cancel.  This will create the
Form.ui.h file.  Everything seems to work ok now.

Source code formatting

Will stick to Bruce Eckel convention of starting brace always at end of line.
indent with spaces 4 spaces.
Header files go from most specific to general as in Eckel.
Will use the get and set convention for member functions.
     Note it is possible to avoid get, for example:

Class Fruit {
      public:
            Fruit(string banana);
	    void setBanana(string banana);
	    string banana();
      private:
	    string banana_;
}

Actually I have now changed to the above style.

private variables will end in underscore.
//enums, consts and defines will be all caps.
enums, consts and typedefs will be UpperCamelCase
defines will be all caps with underscores


Unit Testing
For now will use cxxtest.  Run ./maketests from epsimulator/src to generate the runner program.  Edit maketests to add dependencies, and MyTestSuite.h contains the tests.  The tests HAVE to be in the src directory to compile, and so tests are not a subproject.  Need to make the test suite into a make file, using a different makefile name than Makefile, e.g. maketests and invoke as make -fmaketests, e.g.  Could make a link to this named maketests to keep everything the same.

Unique identifier for each study
A key for each study can be constructed by
lastName+"_"+firstName+"_"+date/time.  Use this for the file name of the data
files and use this to locate the study data in the studieslist (? Make this a
map between the key and the data?)

Use QString QDateTime::toString(const QString& format) const to generate the
date time of the study.  This format string should work:


dd.MM.yyyy.hh.mm.ss // This has been changed to ddMMyyyyhhmmss, without the dots in between.

? add millisecs: zzz

Thus the map could be: QString key: Study study.

I need to be able to generate the key from the QListView (note QListView has
full name and formatted date time as strings, so not easy to change format back).

Can use QListView::hideColumn(int column) along with setResizeEnabled(FALSE,
column) to have hidden list view columns.  The hidden column can contain the
map key.

FIX FOR CXXTEST PROBLEM

Merely including ALL the *.o files needed all Qt-specific tests to compile.  That is, to test PatientDialog, must include in linked files patientdialog.o, moc_patientdialog.o, patientdialogbase.o and moc_patientdialog.o.  (Actually maybe the non-moc ones are needed -- will test: no all the above mentioned files are needed.)

MORE FORMATTING WOES
    Objects in .ui files are actually public data members; therefore should not end in _.  Menu items, etc. are private and should end in _.

How the Catalog Works
    There is only one catalog.  This resides in the program subdirectory system:  i.e.  epsimulator/system.  This catalog contains all study info.  Studies can be in the following places:
        Local       This is by default the epsimulator/studies directory, but can be changed in the systemdialog.
        Optical     This is by default whereever the optical drive is.  We need some sophisticated programming to get this right on program installation.
                        Will set it to /dev/cdrom for now.  Obviously not right for Windows.
        Other       This will by default equal the Local directory, but can be changed to another directory with a file dialog.
        Network     This is a network directory.  This will be by default be blank.  Any blank directory will get an error message that the directory needs to be setup.

    When the catalogComboBox is set to System, all known studies will be displayed.  When set to any of the others, only the studies in that particular directory will be displayed.  When Other is selected, a file dialog will always come up, set to the last Other location, to allow changing on the fly.  Again, an empty path will display and error message, except with Other, when a file dialog will come up.  Other than Other, the paths need to be set with the systemdialog, and this can be an administrator function, password protected.  Also consider disabling the Other option via the systemdialog.  

    The StatusBar will display the current source: epsimulator/system for System, local path for others, consider (Optical) for Optical.    Refresh rereads the studies.eps file.  Regenerate needs to go through each path, make sure each study in each path has a catalog entry, and generate one if not.  The TableList is filtered based on the catalogComboBox.  Any filter on top of that is done separately.  Refresh can be done on a filtered list (by rereading the catalog and reapplying the filter).  Regenerate needs an unfiltered list.  Note that Regenerate when applied to anything other than System will just look at that particular path (E.g. the Local path).

Some problems:
    There is no easy way to find the application directory in Linux.  Data files should go to standard Linux File System locations.  These might depend on where the application is installed (to /usr/local/bin or to ~/bin???).  If the system and data directories don't exist they must be created initially.  This is not hard to do, but does need to be done.  Qt doesn't use the ./configure --path=whatever so no easy way to determine where the app was installed.  Hmmm.........

